services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: log-ingestion-db
    environment:
      POSTGRES_DB: analytics_logs
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password123
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --lc-collate=C --lc-ctype=C"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - log-ingestion-network

  # Redis (for caching and rate limiting)
  redis:
    image: redis:7-alpine
    container_name: log-ingestion-redis
    ports:
      - "6379:6379"
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - log-ingestion-network

  # Log Ingestion Server
  log-server:
    build: .
    container_name: log-ingestion-server
    ports:
      - "8080:8080"
    environment:
      - PORT=8080
      - GIN_MODE=release
      - LOG_LEVEL=info
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=analytics_logs
      - DB_USER=postgres
      - DB_PASSWORD=password123
      - DB_SSL_MODE=disable
      - API_KEYS=habit-tracker-key-dev,habit-tracker-key-prod
      - RATE_LIMIT_REQUESTS_PER_MINUTE=1000
      - RATE_LIMIT_BURST=100
      - MAX_BATCH_SIZE=1000
      - WORKER_POOL_SIZE=10
      - ENABLE_METRICS=true
      - ENABLE_CORS=true
      - ALLOWED_ORIGINS=*
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped
    networks:
      - log-ingestion-network

  # Prometheus (for metrics collection)
  prometheus:
    image: prom/prometheus:latest
    container_name: log-ingestion-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - log-ingestion-network

  # Grafana (for metrics visualization)
  grafana:
    image: grafana/grafana:latest
    container_name: log-ingestion-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_SECURITY_ADMIN_USER=admin
      - GF_INSTALL_PLUGINS=grafana-piechart-panel
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./grafana/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - prometheus
      - postgres
    networks:
      - log-ingestion-network

volumes:
  postgres_data:
  redis_data:
  prometheus_data:
  grafana_data:

networks:
  log-ingestion-network:
    driver: bridge
